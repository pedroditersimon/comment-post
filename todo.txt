
Todo:
- Agregar servicio para chekear lenguaje inapropiado
- Agregar sort by creation date de los comentarios antes de la paginacion
- (api) Hacer controlador de User
- Agregar excepciones de Application
- Utilizar otra base de datos como MySQL, ver SQL Server.
- Authorization (linea 75)
https://github.com/iayti/CleanArchitecture/blob/master/src/Apps/CleanArchitecture.Api/Startup.cs
- Proteger las rutas de moderador
- Hacer tests
- Verificar que el usuario userID existe antes de crear/editar un comentario y meterlo en la bbdd
- Agregar concurrency check



Done:
- Implementar Pagination y PaginationResult<T> en repositorios
x Implementar EF en la infraestructura
	https://github.com/iayti/CleanArchitecture/blob/master/src
	x (infra) Crear ApplicationDBContext
	x (infra) Implementar ICommentRepository con el DBContext
	x (infra) Implementar IUnitOfWork en EF
	x (infra) Configurar servicios por extension de IServiceCollection 
- Hacer la conexion con PosgreSQL en el ApplicationDBContext
- Separar la Infraestructura de la API
	x IServiceCollection utilizarlo unicamente en api, junto con la configuracion del DBContext.
	x Ver bien lo del unit of work, su abstraccion de save quiza no sea adecuada para Application
		imaginate tener guardado en archivos, no tiene un Save()
- Hacer un Repositorio generico
- Agregar endpoint Patch de comment controller
- Sacar repositorio del controllador, pasar el get by id a un caso de uso
- Implementar la paginacion en los repositorios
- Agregar endpoints de get by page id and by replies
- (api) Utilizar los comandos de la Application como DTOs en la request del controller
- (api) Hacer controlador de Comment


------------------------------
Make a ef migration: (in the solution root folder)
dotnet ef migrations add Initial --project CommentPost.Infrastructure --startup-project CommentPost.API -o EntityFramework/Migrations