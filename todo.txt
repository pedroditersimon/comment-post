
Todo:
- Agregar servicio para chekear lenguaje inapropiado
- Utilizar otra base de datos como MySQL, ver SQL Server.
- Verificar que el usuario userID existe antes de crear/editar un comentario y meterlo en la bbdd
- Hacer tests de servicios
- Hacer tests de mappers
- Hacer tests de paginacion
Admin:
	- Agregar rol de admin
	- Agregar funcionalidades para manejar las cuentas de los usuarios
	- (api) Hacer controlador de User
- El patch replaceWith no borra valores con null, sino que las ignora, buscar manera de realmente poner null



Done:
- Implementar Pagination y PaginationResult<T> en repositorios
x Implementar EF en la infraestructura
	https://github.com/iayti/CleanArchitecture/blob/master/src
	x (infra) Crear ApplicationDBContext
	x (infra) Implementar ICommentRepository con el DBContext
	x (infra) Implementar IUnitOfWork en EF
	x (infra) Configurar servicios por extension de IServiceCollection 
- Hacer la conexion con PosgreSQL en el ApplicationDBContext
- Separar la Infraestructura de la API
	x IServiceCollection utilizarlo unicamente en api, junto con la configuracion del DBContext.
	x Ver bien lo del unit of work, su abstraccion de save quiza no sea adecuada para Application
		imaginate tener guardado en archivos, no tiene un Save()
- Hacer un Repositorio generico
- Agregar endpoint Patch de comment controller
- Sacar repositorio del controllador, pasar el get by id a un caso de uso
- Implementar la paginacion en los repositorios
- Agregar endpoints de get by page id and by replies
- (api) Utilizar los comandos de la Application como DTOs en la request del controller
- (api) Hacer controlador de Comment
- Usar Servicios para los casos de uso y no repositorios,
	asi se puede agregar logica especifica como sort y paginacion en la capa Application
- Agregar sort by creation date de los comentarios antes de la paginacion
- Agregar excepciones de Application
- Manejar las excepciones en el controlador y devolver su respectivo codigo HTTP (404,409)
- Hacer tests de casos de uso
- (api) Configurar el servicio IHttpClientFactory 
- Agregar excepciones a los servicios y controladores de auth
- Agregar metodo para verificar password
- Actualizar campos de normalizacion, como LastLoginAt
- Auth:
	x Agregar controlador con endpoits de login, logout, register en local
	x Agregar endpoints login con auth0
	x Servicio para Emitir, decodificar y validar tokens jwt
	x Servicio para obtener access token de auth0 y la informacion del usuario
	x (api) Configurar el servicio Auth0 y Jwt junto con sus setting en appsettings.json
	x (infra) Servicio para validar credenciales del usuario, generar y validar un token
	x Obtener el token jwt de las peticiones por el header authorization Bearer {token}
	x Middleware para auntenticar, ver posibilidad de agregar un atributo a los endpoints
- Agregar concurrency check
- Manejar el error DbUpdateException en los repositorios (clave foranea invalida)
- (api) Usar DTOs en la api, enves de los comandos de los casos de uso
- Usar el userId del token de la request para los comandos de los casos de uso
- Agregar query filter de IsDeleted
- Documentar api en readme

------------------------------
Make a ef migration: (in the solution root folder)
dotnet ef migrations add Initial --project CommentPost.Infrastructure --startup-project CommentPost.API -o EntityFramework/Migrations