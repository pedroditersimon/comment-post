
Todo:
- Agregar servicio para chekear lenguaje inapropiado
- Agregar sort by creation date de los comentarios al obtener del servicio
- (api) Utilizar los comandos de la Application como DTOs en la request del controller
- (api) Hacer controladores
	- Comment
	- User
- Utilizar otra base de datos como MySQL, ver SQL Server.

- Authorization (linea 75)
https://github.com/iayti/CleanArchitecture/blob/master/src/Apps/CleanArchitecture.Api/Startup.cs

Done:
- Implementar Pagination y PaginationResult<T> en repositorios
x Implementar EF en la infraestructura
	https://github.com/iayti/CleanArchitecture/blob/master/src
	x (infra) Crear ApplicationDBContext
	x (infra) Implementar ICommentRepository con el DBContext
	x (infra) Implementar IUnitOfWork en EF
	x (infra) Configurar servicios por extension de IServiceCollection 
- Hacer la conexion con PosgreSQL en el ApplicationDBContext
- Separar la Infraestructura de la API
	x IServiceCollection utilizarlo unicamente en api, junto con la configuracion del DBContext.
	x Ver bien lo del unit of work, su abstraccion de save quiza no sea adecuada para Application
		imaginate tener guardado en archivos, no tiene un Save()
- Hacer un Repositorio generico

------------------------------
Make a ef migration: (in the solution root folder)
dotnet ef migrations add Initial --project CommentPost.Infrastructure --startup-project CommentPost.API -o EntityFramework/Migrations